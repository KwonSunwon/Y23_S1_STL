==============================================
main.cpp, 2023-03-07 화요일 오후 2:41:48
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 7일 (1주 2)
//-------------------------------------------------------
// C++ 복습
//-----------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include "save.hpp"

// [문제] main()을 고치지 말고 의도대로 실행되게 하라.

void change(int&, int&);

int main()
{
    int a{1}, b{2};

    change(a, b);
    std::cout << a << ", " << b << '\n'; // 2, 1

    save("main.cpp");
}

void change(int& a, int& b)
{
    int temp{a};
    a = b;
    b = temp;
}


==============================================
main.cpp, 2023-03-07 화요일 오후 2:42:03
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 7일 (1주 2)
//-------------------------------------------------------
// C++ 복습
//-----------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include "save.hpp"

// [문제] main()을 고치지 말고 의도대로 실행되게 하라.

void change(int&, int&);

int main()
{
    int a{1}, b{2};

    change(a, b);
    std::cout << a << ", " << b << '\n'; // 2, 1
    std::cout << "한글";
    save("main.cpp");
}

void change(int& a, int& b)
{
    int temp{a};
    a = b;
    b = temp;
}


==============================================
main.cpp, 2023-03-07 화요일 오후 2:54:09
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 7일 (1주 2)
//-------------------------------------------------------
// C++ 복습, templete
//-----------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include "save.hpp"

// [문제] main()을 고치지 말고 의도대로 실행되게 하라.

class Dog
{
private :
    int num;

public:
    Dog(int n) : num(n) {};
    friend void change(Dog&, Dog&);
    friend std::ostream& operator<<(std::ostream& os, const Dog& d);
};

std::ostream& operator<<(std::ostream& os, const Dog& d)
{
    return os << d.num;
}

void change(int&, int&);
void change(Dog&, Dog&);

int main()
{
    {
        int a{ 1 }, b{ 2 };
        change(a, b);
        std::cout << a << ", " << b << '\n';
    }
    {
		Dog a{1}, b{2};
		change(a, b);
        std::cout << a << ", " << b << '\n';
	}
    save("main.cpp");
}

void change(int& a, int& b)
{
    int temp{a};
    a = b;
    b = temp;
}

void change(Dog& a, Dog& b)
{
    Dog temp{ a };
    a = b;
    b = temp;
}


==============================================
main.cpp, 2023-03-07 화요일 오후 3:02:07
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 7일 (1주 2)
//-------------------------------------------------------
// C++ 복습, template
//-----------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include "save.hpp"

// [문제] main()을 고치지 말고 의도대로 실행되게 하라.
// change() 함수를 한 번만 코딩해서 하라.

class Dog
{
private :
    int num;

public:
    Dog(int n) : num(n) {};
    friend std::ostream& operator<<(std::ostream& os, const Dog& dog) 
    {
        return os << dog.num;
    }
};

template <class T>
void change(T&, T&);

int main()
{
    {
        int a{ 1 }, b{ 2 };
        change(a, b);
        std::cout << a << ", " << b << '\n';
    }
    {
		Dog a{1}, b{2};
		change(a, b);
        std::cout << a << ", " << b << '\n';
	}
    save("main.cpp");
}

template <class T>
void change(T& a, T& b)
{
    T temp{ a };
    a = b;
    b = temp;
}


==============================================
main.cpp, 2023-03-07 화요일 오후 5:11:23
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 7일 (1주 2)
//-------------------------------------------------------
// C++ 복습, template
//-----------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include "save.hpp"

// [문제] main()을 고치지 말고 의도대로 실행되게 하라.
// change() 함수를 한 번만 코딩해서 하라.

class Dog
{
private :
    int num;

public:
    Dog(int n) : num(n) {};
    friend std::ostream& operator<<(std::ostream& os, const Dog& dog) 
    {
        return os << dog.num;
    }
};

// template은 선언과 동시에 정의
// template으로 작성된 소스코드는 모두에게 공개되어 있다.
// 컴파일러가 소스코드를 확인하고 만들어내야하기 때문에
template <class T>
void change(T& a, T& b)
{
    T temp{ a };
    a = b;
    b = temp;
}

int main()
{
    {
        int a{ 1 }, b{ 2 };
        change(a, b);
        std::cout << a << ", " << b << '\n';
    }
    {
        Dog a{ 1 }, b{ 2 };
        change(a, b);
        std::cout << a << ", " << b << '\n';
    }
    save("main.cpp");
}



==============================================
main.cpp2023-03-07 화요일 오후 6:19:51
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 7일 (1주 2)
//-------------------------------------------------------
// C++ 복습, template
//-----------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include "save.hpp"

// [문제] main()을 고치지 말고 의도대로 실행되게 하라.
// change() 함수를 한 번만 코딩해서 하라.

class Dog
{
private:
    int num;

public:
    Dog(int n) : num(n) {};
    friend std::ostream& operator<<(std::ostream& os, const Dog& dog)
    {
        return os << dog.num;
    }
};

// template은 선언과 동시에 정의
// template으로 작성된 소스코드는 모두에게 공개되어 있다.
// 컴파일러가 소스코드를 확인하고 만들어내야하기 때문에
template <class T>
void change(T& a, T& b)
{
    T temp{ a };
    a = b;
    b = temp;
}

int main()
{
    {
        int a{ 1 }, b{ 2 };
        change(a, b);
        std::cout << a << ", " << b << '\n';
    }
    {
        Dog a{ 1 }, b{ 2 };
        change(a, b);
        std::cout << a << ", " << b << '\n';
    }

    save("main.cpp");
}



==============================================
main.cpp2023-03-13 월요일 오전 10:44:50
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include "save.hpp"

// 랜덤 값을 갖는 int 1'000개를 생성하고 값을 화면에 출력한다.
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid;

	for (int i = 0; i < 1'000; ++i)
		std::cout << uid(dre) << "\n";

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 10:57:22
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.hpp"

// 랜덤 값을 갖는 int 1'000개를 생성하고 값을 화면에 출력한다.
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	for (int i = 0; i < 1'000; ++i)
	{
		int num = uid(dre);
		// < 왼쪽 정렬, ^ 가운데 정렬
		std::cout << std::format("{:8}", num);
	}

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:04:33
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <algorithm>
#include "save.hpp"

// [문제] 랜덤 int 1'000개 중 가장 큰 값을 찾아 화면에 출력하라
std::default_random_engine dre;

int num[1'000];

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	for (int i = 0; i < 1'000; ++i)
	{
		num[i] = uid(dre);
		//int num = uid(dre);
		// < 왼쪽 정렬, ^ 가운데 정렬
		//std::cout << std::format("{:8}", num);
	}

	// 최대값 출력
	std::cout << *std::max_element(num, num + 1'000);

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:08:46
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <algorithm>
#include "save.hpp"

// [문제] 랜덤 int 1'000개 중 가장 큰 값을 찾아 화면에 출력하라
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	int maxValue = std::numeric_limits<int>::min(); // int가 가질 수 있는 최솟값
	for (int i = 0; i < 1'000; ++i)
	{
		maxValue = std::max(maxValue, uid(dre));
	}

	std::cout << "최댓값 - " << maxValue << '\n';

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:09:34
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <algorithm>
#include "save.hpp"

// [문제] 랜덤 int 1'000개 중 가장 큰 값을 찾아 화면에 출력하라
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	int maxValue = std::numeric_limits<int>::min(); // int가 가질 수 있는 최솟값
	for (int i = 0; i < 100'000; ++i)
	{
		int num = uid(dre);
		//std::cout << std::format("{:8}", num);
		if(maxValue < num)
			maxValue = num;

		//maxValue = std::max(maxValue, uid(dre));
	}

	std::cout << "최댓값 - " << maxValue << '\n';

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:12:41
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <algorithm>
#include <fstream>
#include "save.hpp"

// [문제] 랜덤 int 1'000를 생성하여 파일 "int 천개"에 저장하라
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	std::fstream out("int 천개", std::ios::out);

	for (int i = 0; i < 1'000; ++i)
	{
		int num = uid(dre);
		//std::cout << std::format("{:8}", num);
		out << std::format("{:8}", num);
	}

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:17:43
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <algorithm>
#include <fstream>
#include "save.hpp"

// [문제] 랜덤 int 1'000를 생성하여 파일 "int 천개"에 저장하라
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	std::ofstream out{ "int 천개" }; // RAII

	for (int i = 0; i < 1'000; ++i)
	{
		int num = uid(dre);
		out << std::format("{:8}", num);
	}

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:18:27
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <algorithm>
#include <fstream>
#include "save.hpp"

// [문제] 랜덤 int 1'000를 생성하여 파일 "int 천개"에 저장하라
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	std::ofstream out{ "int 천개" }; // RAII

	for (int i = 0; i < 1'000; ++i)
	{
		int num = uid(dre);
		out << std::format("{:8}", num);
		if (i % 8 == 0)
			out << '\n';
	}

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:25:13
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	std::ifstream in{ "int 천개" }; // RAII

	std::vector<int> num{ 0 };
	for (int i = 0; i < 1000; ++i)
	{
		int temp;
		in >> temp;
		num.push_back(temp);
	}

	for (auto d : num)
		std::cout << std::format("{:8}", d);


	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:33:27
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	std::ifstream in{ "int 천개" }; // RAII
	std::istream_iterator<int> start(in), end;

	std::vector<int> num{ start, end }; 
	/*for (int i = 0; i < 1000; ++i)
	{
		int temp;
		in >> temp;
		num.push_back(temp);
	}*/

	for (auto d : num)
		std::cout << std::format("{:8}", d);

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:43:39
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <format>
#include <fstream>
#include "save.hpp"

// [문제] 파일 "int 천개"에 몇 개인지 모르는 int가 저장되어 있다
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

int main()
{
	std::ifstream in{ "int 천개" };

	int num;
	while(in)
	{
		in >> num;
		std::cout << std::format("{:8}", num);
	}

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:44:14
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <format>
#include <fstream>
#include "save.hpp"

// [문제] 파일 "int 천개"에 몇 개인지 모르는 int가 저장되어 있다
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

int main()
{
	std::ifstream in{ "int 천개" };

	int num;
	while(in >> num)
	{
		std::cout << std::format("{:8}", num);
	}

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:44:39
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <format>
#include <fstream>
#include "save.hpp"

// [문제] 파일 "int 천개"에 몇 개인지 모르는 int가 저장되어 있다
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

int main()
{
	std::ifstream in{ "int 천개" };

	int num;
	while(in >> num) // while(in) X -> while(in >> num) O
	{
		std::cout << std::format("{:8}", num);
	}

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:59:41
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <format>
#include <fstream>
#include <iostream>
#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

int main()
{
    std::ifstream in { "int 천개" };

    int a[1000];
    for (int i = 0; i < 1000; ++i) {
        in >> a[i];
    }

    int maxValue = a[0];

    for (int num : a) {
        if (num > maxValue) {
            maxValue = num;
        }
    }

    std::cout << "최댓값은 " << maxValue << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오후 12:07:04
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <format>
#include <fstream>
#include <iostream>
#include <array>
#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

int main()
{
    std::ifstream in { "int 천개" };

    std::array<int, 1000> a; // 앞으로 int[] 사용하지 않는다

    for (int i = 0; i < 1000; ++i) {
        in >> a[i];
    }

    std::cout << *std::max_element(a.begin(), a.end()) << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오후 12:09:16
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <format>
#include <fstream>
#include <iostream>
#include <array>
#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

int main()
{
    std::ifstream in { "int 천개" };

    std::array<int, 1000> a; // 앞으로 int[] 사용하지 않는다

    for (int i = 0; i < 1000; ++i) {
        in >> a[i];
    }

    auto p = std::max_element(a.begin(), a.end());
    std::cout << "최댓값 : " << *p << '\n';

    save("main.cpp");
}