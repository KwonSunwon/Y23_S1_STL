==============================================
main.cpp, 2023-03-07 화요일 오후 2:41:48
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 7일 (1주 2)
//-------------------------------------------------------
// C++ 복습
//-----------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include "save.hpp"

// [문제] main()을 고치지 말고 의도대로 실행되게 하라.

void change(int&, int&);

int main()
{
    int a{1}, b{2};

    change(a, b);
    std::cout << a << ", " << b << '\n'; // 2, 1

    save("main.cpp");
}

void change(int& a, int& b)
{
    int temp{a};
    a = b;
    b = temp;
}


==============================================
main.cpp, 2023-03-07 화요일 오후 2:42:03
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 7일 (1주 2)
//-------------------------------------------------------
// C++ 복습
//-----------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include "save.hpp"

// [문제] main()을 고치지 말고 의도대로 실행되게 하라.

void change(int&, int&);

int main()
{
    int a{1}, b{2};

    change(a, b);
    std::cout << a << ", " << b << '\n'; // 2, 1
    std::cout << "한글";
    save("main.cpp");
}

void change(int& a, int& b)
{
    int temp{a};
    a = b;
    b = temp;
}


==============================================
main.cpp, 2023-03-07 화요일 오후 2:54:09
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 7일 (1주 2)
//-------------------------------------------------------
// C++ 복습, templete
//-----------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include "save.hpp"

// [문제] main()을 고치지 말고 의도대로 실행되게 하라.

class Dog
{
private :
    int num;

public:
    Dog(int n) : num(n) {};
    friend void change(Dog&, Dog&);
    friend std::ostream& operator<<(std::ostream& os, const Dog& d);
};

std::ostream& operator<<(std::ostream& os, const Dog& d)
{
    return os << d.num;
}

void change(int&, int&);
void change(Dog&, Dog&);

int main()
{
    {
        int a{ 1 }, b{ 2 };
        change(a, b);
        std::cout << a << ", " << b << '\n';
    }
    {
		Dog a{1}, b{2};
		change(a, b);
        std::cout << a << ", " << b << '\n';
	}
    save("main.cpp");
}

void change(int& a, int& b)
{
    int temp{a};
    a = b;
    b = temp;
}

void change(Dog& a, Dog& b)
{
    Dog temp{ a };
    a = b;
    b = temp;
}


==============================================
main.cpp, 2023-03-07 화요일 오후 3:02:07
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 7일 (1주 2)
//-------------------------------------------------------
// C++ 복습, template
//-----------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include "save.hpp"

// [문제] main()을 고치지 말고 의도대로 실행되게 하라.
// change() 함수를 한 번만 코딩해서 하라.

class Dog
{
private :
    int num;

public:
    Dog(int n) : num(n) {};
    friend std::ostream& operator<<(std::ostream& os, const Dog& dog) 
    {
        return os << dog.num;
    }
};

template <class T>
void change(T&, T&);

int main()
{
    {
        int a{ 1 }, b{ 2 };
        change(a, b);
        std::cout << a << ", " << b << '\n';
    }
    {
		Dog a{1}, b{2};
		change(a, b);
        std::cout << a << ", " << b << '\n';
	}
    save("main.cpp");
}

template <class T>
void change(T& a, T& b)
{
    T temp{ a };
    a = b;
    b = temp;
}


==============================================
main.cpp, 2023-03-07 화요일 오후 5:11:23
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 7일 (1주 2)
//-------------------------------------------------------
// C++ 복습, template
//-----------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include "save.hpp"

// [문제] main()을 고치지 말고 의도대로 실행되게 하라.
// change() 함수를 한 번만 코딩해서 하라.

class Dog
{
private :
    int num;

public:
    Dog(int n) : num(n) {};
    friend std::ostream& operator<<(std::ostream& os, const Dog& dog) 
    {
        return os << dog.num;
    }
};

// template은 선언과 동시에 정의
// template으로 작성된 소스코드는 모두에게 공개되어 있다.
// 컴파일러가 소스코드를 확인하고 만들어내야하기 때문에
template <class T>
void change(T& a, T& b)
{
    T temp{ a };
    a = b;
    b = temp;
}

int main()
{
    {
        int a{ 1 }, b{ 2 };
        change(a, b);
        std::cout << a << ", " << b << '\n';
    }
    {
        Dog a{ 1 }, b{ 2 };
        change(a, b);
        std::cout << a << ", " << b << '\n';
    }
    save("main.cpp");
}



==============================================
main.cpp2023-03-07 화요일 오후 6:19:51
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 7일 (1주 2)
//-------------------------------------------------------
// C++ 복습, template
//-----------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include "save.hpp"

// [문제] main()을 고치지 말고 의도대로 실행되게 하라.
// change() 함수를 한 번만 코딩해서 하라.

class Dog
{
private:
    int num;

public:
    Dog(int n) : num(n) {};
    friend std::ostream& operator<<(std::ostream& os, const Dog& dog)
    {
        return os << dog.num;
    }
};

// template은 선언과 동시에 정의
// template으로 작성된 소스코드는 모두에게 공개되어 있다.
// 컴파일러가 소스코드를 확인하고 만들어내야하기 때문에
template <class T>
void change(T& a, T& b)
{
    T temp{ a };
    a = b;
    b = temp;
}

int main()
{
    {
        int a{ 1 }, b{ 2 };
        change(a, b);
        std::cout << a << ", " << b << '\n';
    }
    {
        Dog a{ 1 }, b{ 2 };
        change(a, b);
        std::cout << a << ", " << b << '\n';
    }

    save("main.cpp");
}



==============================================
main.cpp2023-03-13 월요일 오전 10:44:50
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include "save.hpp"

// 랜덤 값을 갖는 int 1'000개를 생성하고 값을 화면에 출력한다.
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid;

	for (int i = 0; i < 1'000; ++i)
		std::cout << uid(dre) << "\n";

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 10:57:22
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.hpp"

// 랜덤 값을 갖는 int 1'000개를 생성하고 값을 화면에 출력한다.
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	for (int i = 0; i < 1'000; ++i)
	{
		int num = uid(dre);
		// < 왼쪽 정렬, ^ 가운데 정렬
		std::cout << std::format("{:8}", num);
	}

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:04:33
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <algorithm>
#include "save.hpp"

// [문제] 랜덤 int 1'000개 중 가장 큰 값을 찾아 화면에 출력하라
std::default_random_engine dre;

int num[1'000];

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	for (int i = 0; i < 1'000; ++i)
	{
		num[i] = uid(dre);
		//int num = uid(dre);
		// < 왼쪽 정렬, ^ 가운데 정렬
		//std::cout << std::format("{:8}", num);
	}

	// 최대값 출력
	std::cout << *std::max_element(num, num + 1'000);

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:08:46
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <algorithm>
#include "save.hpp"

// [문제] 랜덤 int 1'000개 중 가장 큰 값을 찾아 화면에 출력하라
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	int maxValue = std::numeric_limits<int>::min(); // int가 가질 수 있는 최솟값
	for (int i = 0; i < 1'000; ++i)
	{
		maxValue = std::max(maxValue, uid(dre));
	}

	std::cout << "최댓값 - " << maxValue << '\n';

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:09:34
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <algorithm>
#include "save.hpp"

// [문제] 랜덤 int 1'000개 중 가장 큰 값을 찾아 화면에 출력하라
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	int maxValue = std::numeric_limits<int>::min(); // int가 가질 수 있는 최솟값
	for (int i = 0; i < 100'000; ++i)
	{
		int num = uid(dre);
		//std::cout << std::format("{:8}", num);
		if(maxValue < num)
			maxValue = num;

		//maxValue = std::max(maxValue, uid(dre));
	}

	std::cout << "최댓값 - " << maxValue << '\n';

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:12:41
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <algorithm>
#include <fstream>
#include "save.hpp"

// [문제] 랜덤 int 1'000를 생성하여 파일 "int 천개"에 저장하라
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	std::fstream out("int 천개", std::ios::out);

	for (int i = 0; i < 1'000; ++i)
	{
		int num = uid(dre);
		//std::cout << std::format("{:8}", num);
		out << std::format("{:8}", num);
	}

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:17:43
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <algorithm>
#include <fstream>
#include "save.hpp"

// [문제] 랜덤 int 1'000를 생성하여 파일 "int 천개"에 저장하라
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	std::ofstream out{ "int 천개" }; // RAII

	for (int i = 0; i < 1'000; ++i)
	{
		int num = uid(dre);
		out << std::format("{:8}", num);
	}

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:18:27
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <algorithm>
#include <fstream>
#include "save.hpp"

// [문제] 랜덤 int 1'000를 생성하여 파일 "int 천개"에 저장하라
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	std::ofstream out{ "int 천개" }; // RAII

	for (int i = 0; i < 1'000; ++i)
	{
		int num = uid(dre);
		out << std::format("{:8}", num);
		if (i % 8 == 0)
			out << '\n';
	}

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:25:13
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	std::ifstream in{ "int 천개" }; // RAII

	std::vector<int> num{ 0 };
	for (int i = 0; i < 1000; ++i)
	{
		int temp;
		in >> temp;
		num.push_back(temp);
	}

	for (auto d : num)
		std::cout << std::format("{:8}", d);


	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:33:27
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
std::default_random_engine dre;

int main()
{
	std::uniform_int_distribution uid{ 0, 9'999 };

	std::ifstream in{ "int 천개" }; // RAII
	std::istream_iterator<int> start(in), end;

	std::vector<int> num{ start, end }; 
	/*for (int i = 0; i < 1000; ++i)
	{
		int temp;
		in >> temp;
		num.push_back(temp);
	}*/

	for (auto d : num)
		std::cout << std::format("{:8}", d);

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:43:39
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <format>
#include <fstream>
#include "save.hpp"

// [문제] 파일 "int 천개"에 몇 개인지 모르는 int가 저장되어 있다
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

int main()
{
	std::ifstream in{ "int 천개" };

	int num;
	while(in)
	{
		in >> num;
		std::cout << std::format("{:8}", num);
	}

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:44:14
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <format>
#include <fstream>
#include "save.hpp"

// [문제] 파일 "int 천개"에 몇 개인지 모르는 int가 저장되어 있다
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

int main()
{
	std::ifstream in{ "int 천개" };

	int num;
	while(in >> num)
	{
		std::cout << std::format("{:8}", num);
	}

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:44:39
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <format>
#include <fstream>
#include "save.hpp"

// [문제] 파일 "int 천개"에 몇 개인지 모르는 int가 저장되어 있다
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

int main()
{
	std::ifstream in{ "int 천개" };

	int num;
	while(in >> num) // while(in) X -> while(in >> num) O
	{
		std::cout << std::format("{:8}", num);
	}

	save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오전 11:59:41
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <format>
#include <fstream>
#include <iostream>
#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

int main()
{
    std::ifstream in { "int 천개" };

    int a[1000];
    for (int i = 0; i < 1000; ++i) {
        in >> a[i];
    }

    int maxValue = a[0];

    for (int num : a) {
        if (num > maxValue) {
            maxValue = num;
        }
    }

    std::cout << "최댓값은 " << maxValue << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오후 12:07:04
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <format>
#include <fstream>
#include <iostream>
#include <array>
#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

int main()
{
    std::ifstream in { "int 천개" };

    std::array<int, 1000> a; // 앞으로 int[] 사용하지 않는다

    for (int i = 0; i < 1000; ++i) {
        in >> a[i];
    }

    std::cout << *std::max_element(a.begin(), a.end()) << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오후 12:09:16
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <format>
#include <fstream>
#include <iostream>
#include <array>
#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

int main()
{
    std::ifstream in { "int 천개" };

    std::array<int, 1000> a; // 앞으로 int[] 사용하지 않는다

    for (int i = 0; i < 1000; ++i) {
        in >> a[i];
    }

    auto p = std::max_element(a.begin(), a.end());
    std::cout << "최댓값 : " << *p << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오후 12:12:07
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <format>
#include <fstream>
#include <iostream>

#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

// contiguous memory(공간적 연속 메모리)
// continuous(시간적 연속)

int main()
{
    std::ifstream in { "int 천개" };

    std::array<int, 1000> a; // 앞으로 int[] 사용하지 않는다

    for (int i = 0; i < 1000; ++i) {
        in >> a[i];
    }

    auto p = std::max_element(a.begin(), a.end());
    std::cout << "최댓값 : " << *p << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오후 12:13:04
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <array>

#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

// contiguous memory(공간적 연속 메모리)
// continuous(시간적 연속)

int main()
{
    std::array<int, 1'000> a;
    std::cout << sizeof a << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오후 12:15:13
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <iostream>

#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

// contiguous memory(공간적 연속 메모리)
// continuous(시간적 연속)

std::array<int, 1'000> ga; // DATA
int gn;

int main()
{
    std::array<int, 1'000> a;
    std::cout << sizeof a << '\n'; // STACK
    int n;

    std::cout << "STACK에 있는 a의 번지 - " << std::addressof(a) << '\n';
    std::cout << "STACK에 있는 n의 번지 - " << std::addressof(n) << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오후 12:16:21
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <iostream>

#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

// contiguous memory(공간적 연속 메모리)
// continuous(시간적 연속)

std::array<int, 1'000> ga; // DATA
int gn;

int main()
{
    std::array<int, 1'000> a;
    std::cout << sizeof a << '\n'; // STACK
    int n;

    std::cout << "STACK에 있는 a의 번지 - " << std::addressof(a) << '\n';
    std::cout << "STACK에 있는 n의 번지 - " << std::addressof(n) << '\n';
    std::cout << '\n';

    std::cout << "DATA에 있는 ga의 번지 - " << std::addressof(ga) << '\n';
    std::cout << "DATA에 있는 gn의 번지 - " << std::addressof(gn) << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오후 12:18:33
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <iostream>

#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

// contiguous memory(공간적 연속 메모리)
// continuous(시간적 연속)

std::array<int, 1'000> ga; // DATA
int gn;

int main()
{
    std::array<int, 1'000> a;
    std::cout << sizeof a << '\n'; // STACK
    int n;

    std::cout << "STACK에 있는 a의 번지 - " << std::addressof(a) << '\n';
    std::cout << "STACK에 있는 n의 번지 - " << std::addressof(n) << '\n';
    std::cout << '\n';

    std::cout << "DATA에 있는 ga의 번지 - " << std::addressof(ga) << '\n';
    std::cout << "DATA에 있는 gn의 번지 - " << std::addressof(gn) << '\n';
    std::cout << '\n';

    std::cout << "CODE에 있는 main - " << std::addressof(main) << '\n';
    std::cout << "CODE에 있는 save - " << std::addressof(save) << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오후 12:18:53
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <iostream>

#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

// contiguous memory(공간적 연속 메모리)
// continuous(시간적 연속)

std::array<int, 1'000> ga; // DATA
int gn;

int main()
{
    std::array<int, 1'000> a;
    std::cout << sizeof a << '\n'; // STACK
    int n;

    std::cout << "STACK에 있는 a의 번지 - " << std::addressof(a) << '\n';
    std::cout << "STACK에 있는 n의 번지 - " << std::addressof(n) << '\n';
    std::cout << '\n';

    std::cout << "DATA에 있는 ga의 번지 - " << std::addressof(ga) << '\n';
    std::cout << "DATA에 있는 gn의 번지 - " << std::addressof(gn) << '\n';
    std::cout << '\n';

    std::cout << "CODE에 있는 main - \t" << std::addressof(main) << '\n';
    std::cout << "CODE에 있는 save - \t" << std::addressof(save) << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-13 월요일 오후 12:20:00
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 13일 (2주 1)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <iostream>

#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

// contiguous memory(공간적 연속 메모리)
// continuous(시간적 연속)

std::array<int, 1'000> ga; // DATA
int gn;

int main()
{
    std::array<int, 1'000> a;
    std::cout << sizeof a << '\n'; // STACK
    int n;

    std::cout << "STACK에 있는 a의 번지 - " << std::addressof(a) << '\n';
    std::cout << "STACK에 있는 n의 번지 - " << std::addressof(n) << '\n';
    std::cout << '\n';

    std::cout << "FreeStore의 번지 \t- ";

    std::cout << "CODE에 있는 main \t- " << std::addressof(main) << '\n';
    std::cout << "CODE에 있는 save \t- " << std::addressof(save) << '\n';
    std::cout << '\n';

    std::cout << "DATA에 있는 ga의 번지 - " << std::addressof(ga) << '\n';
    std::cout << "DATA에 있는 gn의 번지 - " << std::addressof(gn) << '\n';
    std::cout << '\n';


    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 1:37:00
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <iostream>
#include <sstream>

#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

// contiguous memory(공간적 연속 메모리)
// continuous(시간적 연속)

// DATA와 STACK 공간은 떨어져 있다
std::array<int, 1'000> ga; // DATA
int gn;

int main()  // CODE/TEXT SEGMENT -> DATA와 위치가 가까움
{
    std::array<int, 1'000> a;
    std::cout << sizeof a << '\n'; // STACK
    int n;

    int* pn = new int;

    std::cout << "STACK에 있는 a의 번지\t- " << std::addressof(a) << '\n';
    std::cout << "STACK에 있는 n의 번지\t- " << std::addressof(n) << '\n';
    std::cout << '\n';

    //std::cout << "FreeStore의 번지\t- " << std::addressof(pn) << '\n';
    //std::cout << '\n';

    std::cout << "CODE에 있는 main\t- " << std::addressof(main) << '\n';
    std::cout << "CODE에 있는 save\t- " << std::addressof(save) << '\n';
    std::cout << '\n';

    std::cout << "DATA에 있는 ga의 번지\t- " << std::addressof(ga) << '\n';
    std::cout << "DATA에 있는 gn의 번지\t- " << std::addressof(gn) << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 1:39:28
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <iostream>
#include <sstream>

#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

// contiguous memory(공간적 연속 메모리)
// continuous(시간적 연속)

// DATA와 STACK 공간은 떨어져 있다
std::array<int, 1'000> ga; // DATA
int gn;

int main()  // CODE/TEXT SEGMENT -> DATA와 위치가 가까움
{
    std::array<int, 1'000> a;
    std::cout << sizeof a << '\n'; // STACK
    int n;

    std::cout << "STACK에 있는 a의 번지\t- " << std::addressof(a) << '\n';
    std::cout << "STACK에 있는 n의 번지\t- " << std::addressof(n) << '\n';
    std::cout << '\n';

    int* p = new int {};
    std::cout << "FreeStore의 있는 번지\t- " << p << '\n';
    std::cout << "FreeStore의 있는 번지\t- " << std::addressof(p) << '\n';
    std::cout << '\n';

    std::cout << "CODE에 있는 main\t- " << std::addressof(main) << '\n';
    std::cout << "CODE에 있는 save\t- " << std::addressof(save) << '\n';
    std::cout << '\n';

    std::cout << "DATA에 있는 ga의 번지\t- " << std::addressof(ga) << '\n';
    std::cout << "DATA에 있는 gn의 번지\t- " << std::addressof(gn) << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 1:40:44
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <iostream>
#include <sstream>

#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

// contiguous memory(공간적 연속 메모리)
// continuous(시간적 연속)

// DATA와 STACK 공간은 떨어져 있다
std::array<int, 1'000> ga; // DATA
int gn;

int main()  // CODE/TEXT SEGMENT -> DATA와 위치가 가까움
{
    std::array<int, 1'000> a;
    std::cout << sizeof a << '\n'; // STACK
    int n;

    std::cout << "STACK에 있는 a의 번지\t- " << std::addressof(a) << '\n';
    std::cout << "STACK에 있는 n의 번지\t- " << std::addressof(n) << '\n';
    std::cout << '\n';

    int* p = new int {};
    std::cout << "FreeStore의 있는 번지\t- " << p << '\n'; // 포인터 주소가 가리키는 freestore 데이터의 주소
    std::cout << "FreeStore의 있는 번지\t- " << std::addressof(p) << '\n'; // 포인터의 주소
    std::cout << '\n';

    std::cout << "CODE에 있는 main\t- " << std::addressof(main) << '\n';
    std::cout << "CODE에 있는 save\t- " << std::addressof(save) << '\n';
    std::cout << '\n';

    std::cout << "DATA에 있는 ga의 번지\t- " << std::addressof(ga) << '\n';
    std::cout << "DATA에 있는 gn의 번지\t- " << std::addressof(gn) << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 1:42:28
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
// int 한 개를 저장하는 데 필요한 메모리 공간은?
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <iostream>
#include <sstream>

#include "save.hpp"

// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다

// contiguous memory(공간적 연속 메모리)
// continuous(시간적 연속)

// DATA와 STACK 공간은 떨어져 있다
std::array<int, 1'000> ga; // DATA
int gn;

int main()  // CODE/TEXT SEGMENT -> DATA와 위치가 가까움
{
    std::array<int, 1'000> a;
    std::cout << sizeof a << '\n'; // STACK
    int n;

    std::cout << "STACK에 있는 a의 번지\t- " << std::addressof(a) << '\n';
    std::cout << "STACK에 있는 n의 번지\t- " << std::addressof(n) << '\n';
    std::cout << '\n';

    int* p = new int {};
    std::cout << "FreeStore의 있는 번지\t- " << p << '\n'; // 포인터 주소가 가리키는 freestore 데이터의 주소
    //std::cout << "FreeStore의 있는 번지\t- " << std::addressof(p) << '\n'; // 포인터의 주소
    std::cout << '\n';

    std::cout << "CODE에 있는 main\t- " << std::addressof(main) << '\n';
    std::cout << "CODE에 있는 save\t- " << std::addressof(save) << '\n';
    std::cout << '\n';

    // DATA 영역은 두 가지로 나뉜다
    std::cout << "DATA에 있는 ga의 번지\t- " << std::addressof(ga) << '\n';
    std::cout << "DATA에 있는 gn의 번지\t- " << std::addressof(gn) << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 1:43:53
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
// int 한 개를 저장하는 데 필요한 메모리 공간은?
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <array>

#include "save.hpp"

int main()
{
    int n; // int의 메모리 크기는 sizeof(int)
    std::cout << "int의 메모리 크기는 " << sizeof(int) << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 1:44:59
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
// int 한 개를 저장하는 데 필요한 메모리 공간은?
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <array>

#include "save.hpp"

int main()
{
    int n; // int의 크기 >= 2 (표준으로 정의된 답)

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 1:46:32
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
// int 한 개를 저장하는 데 필요한 메모리 공간은?
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <array>

#include "save.hpp"

int main()
{
    int n;
    
    std::cout << "int의 최솟값 - " << std::numeric_limits<int>::min() << '\n';
    std::cout << "int의 최댓값 - " << std::numeric_limits<int>::max() << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 1:51:02
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
// int 한 개를 저장하는 데 필요한 메모리 공간은? - 4
// 파일에 기록한다면 - 1(2) ~ 11(12) byte의 공간이 가변적으로 필요
// --> 평균 6byte가 필요
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <array>

#include "save.hpp"

int main()
{
    int n;
    
    std::cout << "int의 최솟값 - " << std::numeric_limits<int>::min() << '\n';
    std::cout << "int의 최댓값 - " << std::numeric_limits<int>::max() << '\n';

    n = 1;
    std::cout << n << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 2:08:06
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
// int 한 개를 저장하는 데 필요한 메모리 공간은? - 4
// 파일에 기록한다면 - 1(2) ~ 11(12) byte의 공간이 가변적으로 필요
// --> 평균 6byte가 필요
// 저수준 입출력 - 파일에 비트 패턴을 그대로 저장(bit copy)
// 고수준 입출력 - out << a[0]과 같이 저장하는 경우
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <fstream>
#include <iostream>
#include <numeric>

#include "save.hpp"

// [문제] int 1000개를 파일 "int 천개 메모리"에 메모리 그대로 저장하라

int main()
{
    std::array<int, 1'000> a;
    std::iota(a.begin(), a.end(), 1);

    std::ofstream out { "int 천개 메모리" };
    out.write(reinterpret_cast<char*>(a.data()), 4000);

     save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 2:08:39
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
// int 한 개를 저장하는 데 필요한 메모리 공간은? - 4
// 파일에 기록한다면 - 1(2) ~ 11(12) byte의 공간이 가변적으로 필요
// --> 평균 6byte가 필요
// 저수준 입출력 - 파일에 비트 패턴을 그대로 저장(bit copy)
// 고수준 입출력 - out << a[0]과 같이 저장하는 경우
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <fstream>
#include <iostream>
#include <numeric>

#include "save.hpp"

// [문제] int 1000개를 파일 "int 천개 메모리"에 메모리 그대로 저장하라

int main()
{
    std::array<int, 1'000> a;
    std::iota(a.begin(), a.end(), 1);

    std::ofstream out { "int 천개 메모리" };
    out.write((char*)&a, 4000);

     save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 2:09:29
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
// int 한 개를 저장하는 데 필요한 메모리 공간은? - 4
// 파일에 기록한다면 - 1(2) ~ 11(12) byte의 공간이 가변적으로 필요
// --> 평균 6byte가 필요
// 저수준 입출력 - 파일에 비트 패턴을 그대로 저장(bit copy)
// 고수준 입출력 - out << a[0]과 같이 저장하는 경우
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <fstream>
#include <iostream>
#include <numeric>

#include "save.hpp"

// [문제] int 1000개를 파일 "int 천개 메모리"에 메모리 그대로 저장하라

int main()
{
    std::array<int, 1'000> a;
    std::iota(a.begin(), a.end(), 1);

    std::ofstream out { "int 천개 메모리" };
    out.write((char*)&a, a.size() * sizeof(int));

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 2:16:36
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
// int 한 개를 저장하는 데 필요한 메모리 공간은? - 4
// 파일에 기록한다면 - 1(2) ~ 11(12) byte의 공간이 가변적으로 필요
// --> 평균 6byte가 필요
// 저수준 입출력 - 파일에 비트 패턴을 그대로 저장(bit copy)
// 고수준 입출력 - out << a[0]과 같이 저장하는 경우
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <fstream>
#include <iostream>
#include <numeric>

#include "save.hpp"

// [문제] int 1000개를 파일 "int 천개 메모리"에 메모리 그대로 저장하라

int main()
{
    std::array<int, 1'000> a;
    std::iota(a.begin(), a.end(), 1);

    std::ofstream out { "int 천개 메모리", std::ios::binary };
    out.write((char*)&a, a.size() * sizeof(int));

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 2:18:16
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
// int 한 개를 저장하는 데 필요한 메모리 공간은? - 4
// 파일에 기록한다면 - 1(2) ~ 11(12) byte의 공간이 가변적으로 필요
// --> 평균 6byte가 필요
// 저수준 입출력 - 파일에 비트 패턴을 그대로 저장(bit copy)
// 고수준 입출력 - out << a[0]과 같이 저장하는 경우
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <fstream>
#include <iostream>
#include <numeric>

#include "save.hpp"

// [문제] int 1000개를 파일 "int 천개 메모리"에 메모리 그대로 저장하라

int main()
{
    std::array<int, 1'000> a;
    std::iota(a.begin(), a.end(), 1);

    std::ofstream out { "int 천개 메모리", std::ios::binary };
    out.write((char*)&a, a.size() * sizeof(int)); // binary 모드로 열어야 4000byte가 들어간다

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 2:30:38
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
// int 한 개를 저장하는 데 필요한 메모리 공간은? - 4
// 파일에 기록한다면 - 1(2) ~ 11(12) byte의 공간이 가변적으로 필요
// --> 평균 6byte가 필요
// 저수준 입출력 - 파일에 비트 패턴을 그대로 저장(bit copy)
// 고수준 입출력 - out << a[0]과 같이 저장하는 경우
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <fstream>
#include <iostream>

#include "save.hpp"

// [문제] 파일 "int 천개 메모리"에 있는 int값 1000개를 메모리에 저장한 후 화면에 출력

int main()
{
    std::array<int, 1'000> a;

    std::ifstream in { "int 천개 메모리", std::ios::binary };

    in.read((char*)&a, a.size() * sizeof(int));
    for (auto d : a)
        std::cout << d << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 2:36:16
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
// int 한 개를 저장하는 데 필요한 메모리 공간은? - 4
// 파일에 기록한다면 - 1(2) ~ 11(12) byte의 공간이 가변적으로 필요
// --> 평균 6byte가 필요
// 저수준 입출력 - 파일에 비트 패턴을 그대로 저장(bit copy)
// 고수준 입출력 - out << a[0]과 같이 저장하는 경우
// 
// 파일을 binary mode로 열기 - 문자변환이 일어나지 않음
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <array>
#include <fstream>
#include <format>

#include "save.hpp"

// [문제] 파일 "int 천개 메모리"에 있는 int값 1000개를 메모리에 저장한 후 화면에 출력

int main()
{
    std::ifstream in { "int 천개 메모리", std::ios::binary };

    if (!in) {
        std::cout << "File is not found."
                  << "\n";
        return 0;
    }

    std::array<int, 1'000> a;

    in.read((char*)&a, a.size() * sizeof(int));

    for (auto num : a)
        std::cout << std::format("{:8}", num) << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 2:36:29
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
// int 한 개를 저장하는 데 필요한 메모리 공간은? - 4
// 파일에 기록한다면 - 1(2) ~ 11(12) byte의 공간이 가변적으로 필요
// --> 평균 6byte가 필요
// 저수준 입출력 - 파일에 비트 패턴을 그대로 저장(bit copy)
// 고수준 입출력 - out << a[0]과 같이 저장하는 경우
// 
// 파일을 binary mode로 열기 - 문자변환이 일어나지 않음
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <array>
#include <fstream>
#include <format>

#include "save.hpp"

// [문제] 파일 "int 천개 메모리"에 있는 int값 1000개를 메모리에 저장한 후 화면에 출력

int main()
{
    std::ifstream in { "int 천개 메모리", std::ios::binary };

    if (!in) {
        std::cout << "File is not found."
                  << "\n";
        return 0;
    }

    std::array<int, 1'000> a;

    in.read((char*)&a, a.size() * sizeof(int));

    for (auto num : a)
        std::cout << std::format("{:8}", num);

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 2:38:13
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - int
// int 한 개를 저장하는 데 필요한 메모리 공간은? - 4
// 파일에 기록한다면 - 1(2) ~ 11(12) byte의 공간이 가변적으로 필요
// --> 평균 6byte가 필요
// 저수준 입출력 - 파일에 비트 패턴을 그대로 저장(bit copy)
// 고수준 입출력 - out << a[0]과 같이 저장하는 경우
// 
// 파일을 binary mode로 열기 - 문자변환이 일어나지 않음
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <array>
#include <fstream>
#include <format>

#include "save.hpp"

// [문제] 파일 "int 천개 메모리"에 있는 int값 1000개를 메모리에 저장한 후 화면에 출력

int main()
{
    std::ifstream in { "int 천개 메모리", std::ios::binary }; // 파일을 열 때도 바이너리라면 바이너리로 열어줘야함

    if (!in) {
        std::cout << "File is not found."
                  << "\n";
        return 0;
    }

    std::array<int, 1'000> a;

    in.read((char*)&a, a.size() * sizeof(int));

    for (auto num : a)
        std::cout << std::format("{:8}", num);

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 2:50:59
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - class
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <fstream>
#include <random>

#include "save.hpp"

std::default_random_engine dre;
std::uniform_int_distribution<int> uidChar { 'a', 'z' };
std::uniform_int_distribution uidNum { 1, 10'000 };

class Dog {
    char c;
    int n;

public:
    Dog() {
        c = uidChar(dre); // ['a', 'z']
        n = uidNum(dre); // [1, 10'000]
    }

    friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
        return os << "글자 - " << dog.c << ", 숫자 - " << dog.n;
    }
};

// [문제] Dog 1000 객체를 파일 "Dog 천마리"를 binary mode로 열고
// 메모리 그대로 파일에 기록하라

int main()
{
    Dog dog;
    std::cout << dog << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 2:52:08
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - class
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <fstream>
#include <random>
#include <array>

#include "save.hpp"

std::default_random_engine dre;
std::uniform_int_distribution<int> uidChar { 'a', 'z' };
std::uniform_int_distribution uidNum { 1, 10'000 };

class Dog {
    char c;
    int n;

public:
    Dog() {
        c = uidChar(dre); // ['a', 'z']
        n = uidNum(dre); // [1, 10'000]
    }

    friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
        return os << "글자 - " << dog.c << ", 숫자 - " << dog.n;
    }
};

// [문제] Dog 1000 객체를 파일 "Dog 천마리"를 binary mode로 열고
// 메모리 그대로 파일에 기록하라

int main()
{
    std::array<Dog, 1'000> dogs;

    for (Dog& dog : dogs)
        std::cout << dog << '\n';

    save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 3:04:50
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - class
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <fstream>
#include <iostream>
#include <random>

#include "save.hpp"

std::default_random_engine dre;
std::uniform_int_distribution<int> uidChar{ 'a', 'z' };
std::uniform_int_distribution uidNum{ 1, 10'000 };

class Dog {
	// 5byte로 끝낼 수 있지만 속도를 위해 8byte 저장
	// 빈 공간 패딩
	char c;
	int n;

public:
	Dog()
	{
		c = uidChar(dre); // ['a', 'z']
		n = uidNum(dre); // [1, 10'000]
	}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog)
	{
		return os << "글자 - " << dog.c << ", 숫자 - " << dog.n;
	}
};

// [문제] Dog 1000 객체를 파일 "Dog 천마리"를 binary mode로 열고
// 메모리 그대로 파일에 기록하라

int main()
{
	std::array<Dog, 1'000> dogs;

	// std::ofstream out { "Dog 천마리", std::ios::binary };
	// out.write((char*)&dogs, dogs.size() * sizeof(Dog)); // 8000byte로 저장됨

	std::ifstream in{ "Dog 천마리", std::ios::binary };
	in.read((char*)&dogs, dogs.size() * sizeof(Dog));

	for (auto& dog : dogs) {
		std::cout << dog << '\n';
	}

	 save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 3:11:16
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - class
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <fstream>
#include <iostream>

#include "save.hpp"

class Dog {
	// 5byte로 끝낼 수 있지만 속도를 위해 8byte 저장
	// 빈 공간 패딩
	char c;
	int n;

public:
	Dog(){}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog)
	{
		return os << "글자 - " << dog.c << ", 숫자 - " << dog.n;
	}

	friend std::istream& operator>>(std::istream& is, Dog& dog)
	{
		is.read((char*)&dog, sizeof(Dog));
		return is;
	}
};

// [문제] Dog 1000 객체가 파일 "Dog 천마리"에 binary mode로 연 파일에
// write 함수로 메모리 그대로 기록되어 있다.
// Dog의 정보를 cout으로 화면에 출력하라.

int main()
{
	std::ifstream in{ "Dog 천마리", std::ios::binary };

	if (!in)
		return 0;

	Dog dog;
	while (in >> dog) {
		std::cout << dog << '\n';
	}

	 save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 3:12:14
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - class
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <fstream>
#include <iostream>

#include "save.hpp"

class Dog {
	// 5byte로 끝낼 수 있지만 속도를 위해 8byte 저장
	// 빈 공간 패딩
	char c;
	int n;

public:
	Dog() {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog)
	{
		return os << "글자 - " << dog.c << ", 숫자 - " << dog.n;
	}

	friend std::istream& operator>>(std::istream& is, Dog& dog)
	{
		is.read((char*)&dog, sizeof(Dog));
		return is;
	}
};

// [문제] Dog 1000 객체가 파일 "Dog 천마리"에 binary mode로 연 파일에
// write 함수로 메모리 그대로 기록되어 있다.
// Dog의 정보를 cout으로 화면에 출력하라.

int main()
{
	std::ifstream in{ "Dog 천마리", std::ios::binary };

	if (!in)
		return 0;

	Dog dog;
	int cnt{};
	while (in >> dog) {
		std::cout << dog << '\n';
		++cnt;
	}

	std::cout << "모두 " << cnt << "개 객체를 읽음" << '\n';

	save("main.cpp");
}


==============================================
main.cpp2023-03-14 화요일 오후 3:12:29
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 14일 (2주 2)
//-------------------------------------------------------
// 많은 수의 자료 다루기 - class
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <array>
#include <fstream>
#include <iostream>

#include "save.hpp"

class Dog {
	// 5byte로 끝낼 수 있지만 속도를 위해 8byte 저장
	// 빈 공간 패딩
	char c;
	int n;

public:
	Dog() {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog)
	{
		return os << "글자 - " << dog.c << ", 숫자 - " << dog.n;
	}

	friend std::istream& operator>>(std::istream& is, Dog& dog)
	{
		is.read((char*)&dog, sizeof(Dog));
		return is;
	}
};

// [문제] Dog 1000 객체가 파일 "Dog 천마리"에 binary mode로 연 파일에
// write 함수로 메모리 그대로 기록되어 있다.
// Dog의 정보를 cout으로 화면에 출력하라.

int main()
{
	std::ifstream in{ "Dog 천마리", std::ios::binary };

	if (!in)
		return 0;

	Dog dog;
	int cnt{};
	while (in >> dog) {
		std::cout << dog << '\n';
		++cnt;
	}

	std::cout << "모두 " << cnt << "개 객체를 읽음" << '\n';

	save("main.cpp");
}


==============================================
main.cpp2023-03-20 월요일 오전 10:33:34
==============================================

//-------------------------------------------------------
// 2023 1학기 STL 3월 20일 (3주 1)
//-------------------------------------------------------
// STACK의 한계
//-------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - latest, SDL/아니오
//-------------------------------------------------------

#include <iostream>
#include <array>
#include "save.hpp"

int main()
{
	// 여기에서 객체를 생성 -> STACK에 생성
	std::array<int, 1'000> a;	// 4kB
	std::cout << sizeof(a) << '\n';

	 save("main.cpp");
	git_commit("3주 1차 시작");
}